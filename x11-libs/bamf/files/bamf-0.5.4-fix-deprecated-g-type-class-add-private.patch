diff -dNur a/configure.ac b/configure.ac
--- a/configure.ac	2018-11-07 23:39:11.355315678 +0100
+++ b/configure.ac	2020-05-01 14:46:45.746228789 +0200
@@ -44,7 +44,7 @@
 #
 # glib
 #
-PKG_CHECK_MODULES(GLIB, glib-2.0 >= 2.32.0 gio-2.0 >= 2.30.0 gio-unix-2.0)
+PKG_CHECK_MODULES(GLIB, glib-2.0 >= 2.38.0 gio-2.0 >= 2.30.0 gio-unix-2.0)
 
 #
 # gdbus-codegen
diff -dNur a/lib/libbamf/bamf-application.c b/lib/libbamf/bamf-application.c
--- a/lib/libbamf/bamf-application.c	2018-11-07 23:39:11.363315942 +0100
+++ b/lib/libbamf/bamf-application.c	2020-05-01 14:46:45.746228789 +0200
@@ -45,11 +45,6 @@
 #include <gio/gdesktopappinfo.h>
 #include <string.h>
 
-G_DEFINE_TYPE (BamfApplication, bamf_application, BAMF_TYPE_VIEW);
-
-#define BAMF_APPLICATION_GET_PRIVATE(o) \
-  (G_TYPE_INSTANCE_GET_PRIVATE ((o), BAMF_TYPE_APPLICATION, BamfApplicationPrivate))
-
 enum
 {
   DESKTOP_FILE_UPDATED,
@@ -71,6 +66,8 @@
   int                      show_stubs;
 };
 
+G_DEFINE_TYPE_WITH_PRIVATE (BamfApplication, bamf_application, BAMF_TYPE_VIEW);
+
 /**
  * bamf_application_get_supported_mime_types:
  * @application: a #BamfApplication
@@ -711,8 +708,6 @@
   view_class->set_sticky = bamf_application_set_sticky;
   view_class->click_behavior = bamf_application_get_click_suggestion;
 
-  g_type_class_add_private (obj_class, sizeof (BamfApplicationPrivate));
-
   application_signals [DESKTOP_FILE_UPDATED] =
     g_signal_new (BAMF_APPLICATION_SIGNAL_DESKTOP_FILE_UPDATED,
                   G_OBJECT_CLASS_TYPE (klass),
@@ -743,7 +738,7 @@
 {
   BamfApplicationPrivate *priv;
 
-  priv = self->priv = BAMF_APPLICATION_GET_PRIVATE (self);
+  priv = self->priv = bamf_application_get_instance_private (self);
   priv->show_stubs = -1;
 
   g_signal_connect (self, "child-added", G_CALLBACK (bamf_application_on_child_added), NULL);
diff -dNur a/lib/libbamf/bamf-control.c b/lib/libbamf/bamf-control.c
--- a/lib/libbamf/bamf-control.c	2018-11-07 23:39:11.363315942 +0100
+++ b/lib/libbamf/bamf-control.c	2020-05-01 14:46:45.746228789 +0200
@@ -39,16 +39,13 @@
 #include "bamf-control.h"
 #include "bamf-view-private.h"
 
-G_DEFINE_TYPE (BamfControl, bamf_control, G_TYPE_OBJECT);
-
-#define BAMF_CONTROL_GET_PRIVATE(o) \
-  (G_TYPE_INSTANCE_GET_PRIVATE ((o), BAMF_TYPE_CONTROL, BamfControlPrivate))
-
 struct _BamfControlPrivate
 {
   BamfDBusControl *proxy;
 };
 
+G_DEFINE_TYPE_WITH_PRIVATE (BamfControl, bamf_control, G_TYPE_OBJECT);
+
 /* Globals */
 static BamfControl * default_control = NULL;
 
@@ -87,7 +84,6 @@
   obj_class->dispose = bamf_control_dispose;
   obj_class->finalize = bamf_control_finalize;
 
-  g_type_class_add_private (obj_class, sizeof (BamfControlPrivate));
   obj_class->dispose = bamf_control_dispose;
 }
 
@@ -97,7 +93,7 @@
   BamfControlPrivate *priv;
   GError           *error = NULL;
 
-  priv = self->priv = BAMF_CONTROL_GET_PRIVATE (self);
+  priv = self->priv = bamf_control_get_instance_private (self);
 
   priv->proxy = _bamf_dbus_control_proxy_new_for_bus_sync (G_BUS_TYPE_SESSION,
                                                            G_DBUS_PROXY_FLAGS_NONE,
diff -dNur a/lib/libbamf/bamf-factory.c b/lib/libbamf/bamf-factory.c
--- a/lib/libbamf/bamf-factory.c	2018-11-07 23:39:11.363315942 +0100
+++ b/lib/libbamf/bamf-factory.c	2020-05-01 14:46:45.746228789 +0200
@@ -40,17 +40,14 @@
 #include "bamf-application-private.h"
 #include "bamf-view-private.h"
 
-G_DEFINE_TYPE (BamfFactory, bamf_factory, G_TYPE_OBJECT);
-
-#define BAMF_FACTORY_GET_PRIVATE(o) \
-  (G_TYPE_INSTANCE_GET_PRIVATE ((o), BAMF_TYPE_FACTORY, BamfFactoryPrivate))
-
 struct _BamfFactoryPrivate
 {
   GHashTable *open_views;
   GList *allocated_views;
 };
 
+G_DEFINE_TYPE_WITH_PRIVATE (BamfFactory, bamf_factory, G_TYPE_OBJECT);
+
 static BamfFactory *static_factory = NULL;
 
 static void on_view_weak_unref (BamfFactory *self, BamfView *view_was_here);
@@ -107,15 +104,13 @@
 
   obj_class->dispose = bamf_factory_dispose;
   obj_class->finalize = bamf_factory_finalize;
-
-  g_type_class_add_private (obj_class, sizeof (BamfFactoryPrivate));
 }
 
 
 static void
 bamf_factory_init (BamfFactory *self)
 {
-  self->priv = BAMF_FACTORY_GET_PRIVATE (self);
+  self->priv = bamf_factory_get_instance_private (self);
   self->priv->open_views = g_hash_table_new_full (g_str_hash, g_str_equal,
                                                   g_free, g_object_unref);
 }
diff -dNur a/lib/libbamf/bamf-matcher.c b/lib/libbamf/bamf-matcher.c
--- a/lib/libbamf/bamf-matcher.c	2018-11-07 23:39:11.363315942 +0100
+++ b/lib/libbamf/bamf-matcher.c	2020-05-01 14:47:19.098227093 +0200
@@ -42,11 +42,6 @@
 #include "bamf-view-private.h"
 #include "bamf-factory.h"
 
-G_DEFINE_TYPE (BamfMatcher, bamf_matcher, G_TYPE_OBJECT);
-
-#define BAMF_MATCHER_GET_PRIVATE(o) \
-  (G_TYPE_INSTANCE_GET_PRIVATE ((o), BAMF_TYPE_MATCHER, BamfMatcherPrivate))
-
 enum
 {
   VIEW_OPENED,
@@ -68,6 +63,8 @@
   BamfApplication *active_application;
 };
 
+G_DEFINE_TYPE_WITH_PRIVATE (BamfMatcher, bamf_matcher, G_TYPE_OBJECT);
+
 static BamfMatcher * default_matcher = NULL;
 
 static void bamf_matcher_dispose (GObject *object);
@@ -87,7 +84,6 @@
 {
   GObjectClass *obj_class = G_OBJECT_CLASS (klass);
 
-  g_type_class_add_private (obj_class, sizeof (BamfMatcherPrivate));
   obj_class->dispose = bamf_matcher_dispose;
   obj_class->finalize = bamf_matcher_finalize;
 
@@ -279,7 +275,7 @@
   BamfMatcherPrivate *priv;
   GError *error = NULL;
 
-  priv = self->priv = BAMF_MATCHER_GET_PRIVATE (self);
+  priv = self->priv = bamf_matcher_get_instance_private (self);
   priv->cancellable = g_cancellable_new ();
   priv->proxy = _bamf_dbus_matcher_proxy_new_for_bus_sync (G_BUS_TYPE_SESSION,
                                                            G_DBUS_PROXY_FLAGS_NONE,
diff -dNur a/lib/libbamf/bamf-tab.c b/lib/libbamf/bamf-tab.c
--- a/lib/libbamf/bamf-tab.c	2018-11-07 23:39:11.367316076 +0100
+++ b/lib/libbamf/bamf-tab.c	2020-05-01 14:46:45.750228789 +0200
@@ -29,8 +29,6 @@
 #include "bamf-tab.h"
 #include "bamf-view-private.h"
 
-#define BAMF_TAB_GET_PRIVATE(object) (G_TYPE_INSTANCE_GET_PRIVATE (object, BAMF_TYPE_TAB, BamfTabPrivate))
-
 enum
 {
   PROP_0,
@@ -47,7 +45,7 @@
 
 static void bamf_tab_unset_proxy (BamfTab *self);
 
-G_DEFINE_TYPE (BamfTab, bamf_tab, BAMF_TYPE_VIEW);
+G_DEFINE_TYPE_WITH_PRIVATE (BamfTab, bamf_tab, BAMF_TYPE_VIEW);
 
 static void
 on_proxy_property_change (GObject *gobject, GParamSpec *pspec, gpointer user_data)
@@ -169,14 +167,12 @@
   pspec = g_param_spec_boolean("is-foreground-tab", "Foreground tab", "Whether the tab is the foreground tab in it's toplevel container",
                                FALSE, G_PARAM_READABLE);
   g_object_class_install_property (obj_class, PROP_IS_FOREGROUND_TAB, pspec);
-
-  g_type_class_add_private (obj_class, sizeof(BamfTabPrivate));
 }
 
 static void
 bamf_tab_init (BamfTab *self)
 {
-  self->priv = BAMF_TAB_GET_PRIVATE (self);
+  self->priv = bamf_tab_get_instance_private (self);
 }
 
 BamfTab *
diff -dNur a/lib/libbamf/bamf-view.c b/lib/libbamf/bamf-view.c
--- a/lib/libbamf/bamf-view.c	2018-11-07 23:39:11.371316208 +0100
+++ b/lib/libbamf/bamf-view.c	2020-05-01 14:46:45.750228789 +0200
@@ -43,11 +43,6 @@
 #include "bamf-tab.h"
 #include "bamf-window.h"
 
-G_DEFINE_TYPE (BamfView, bamf_view, G_TYPE_INITIALLY_UNOWNED);
-
-#define BAMF_VIEW_GET_PRIVATE(o) \
-  (G_TYPE_INSTANCE_GET_PRIVATE ((o), BAMF_TYPE_VIEW, BamfViewPrivate))
-
 enum
 {
   ACTIVE_CHANGED,
@@ -93,6 +88,8 @@
   gboolean          sticky;
 };
 
+G_DEFINE_TYPE_WITH_PRIVATE (BamfView, bamf_view, G_TYPE_INITIALLY_UNOWNED);
+
 static void bamf_view_unset_proxy (BamfView *self);
 
 /**
@@ -943,8 +940,6 @@
   properties[PROP_USER_VISIBLE] = g_param_spec_boolean ("user-visible", "user-visible", "user-visible", FALSE, G_PARAM_READABLE);
   g_object_class_install_property (obj_class, PROP_USER_VISIBLE, properties[PROP_USER_VISIBLE]);
 
-  g_type_class_add_private (obj_class, sizeof (BamfViewPrivate));
-
   view_signals [ACTIVE_CHANGED] =
     g_signal_new (BAMF_VIEW_SIGNAL_ACTIVE_CHANGED,
                   G_OBJECT_CLASS_TYPE (klass),
@@ -1050,7 +1045,7 @@
 {
   BamfViewPrivate *priv;
 
-  priv = self->priv = BAMF_VIEW_GET_PRIVATE (self);
+  priv = self->priv = bamf_view_get_instance_private (self);
   priv->cancellable = g_cancellable_new ();
   priv->is_closed = TRUE;
   priv->reload_children = TRUE;
diff -dNur a/lib/libbamf/bamf-window.c b/lib/libbamf/bamf-window.c
--- a/lib/libbamf/bamf-window.c	2018-11-07 23:39:11.371316208 +0100
+++ b/lib/libbamf/bamf-window.c	2020-05-01 14:46:45.750228789 +0200
@@ -40,11 +40,6 @@
 #include "bamf-window.h"
 #include "bamf-factory.h"
 
-G_DEFINE_TYPE (BamfWindow, bamf_window, BAMF_TYPE_VIEW);
-
-#define BAMF_WINDOW_GET_PRIVATE(o) \
-  (G_TYPE_INSTANCE_GET_PRIVATE ((o), BAMF_TYPE_WINDOW, BamfWindowPrivate))
-
 struct _BamfWindowPrivate
 {
   BamfDBusItemWindow        *proxy;
@@ -56,6 +51,8 @@
   BamfWindowMaximizationType maximized;
 };
 
+G_DEFINE_TYPE_WITH_PRIVATE (BamfWindow, bamf_window, BAMF_TYPE_VIEW);
+
 enum
 {
   MONITOR_CHANGED,
@@ -412,8 +409,6 @@
   GObjectClass  *obj_class  = G_OBJECT_CLASS (klass);
   BamfViewClass *view_class = BAMF_VIEW_CLASS (klass);
 
-  g_type_class_add_private (obj_class, sizeof (BamfWindowPrivate));
-
   obj_class->dispose = bamf_window_dispose;
   view_class->active_changed = bamf_window_active_changed;
   view_class->set_path = bamf_window_set_path;
@@ -442,7 +437,7 @@
 {
   BamfWindowPrivate *priv;
 
-  priv = self->priv = BAMF_WINDOW_GET_PRIVATE (self);
+  priv = self->priv = bamf_window_get_instance_private (self);
   priv->xid = 0;
   priv->pid = 0;
   priv->type = BAMF_WINDOW_UNKNOWN;
diff -dNur a/src/bamf-application.c b/src/bamf-application.c
--- a/src/bamf-application.c	2018-11-07 23:39:11.375316341 +0100
+++ b/src/bamf-application.c	2020-05-01 14:46:45.750228789 +0200
@@ -27,13 +27,7 @@
 #include <string.h>
 #include <gio/gdesktopappinfo.h>
 
-#define BAMF_APPLICATION_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE(obj, \
-BAMF_TYPE_APPLICATION, BamfApplicationPrivate))
-
 static void bamf_application_dbus_application_iface_init (BamfDBusItemApplicationIface *iface);
-G_DEFINE_TYPE_WITH_CODE (BamfApplication, bamf_application, BAMF_TYPE_VIEW,
-                         G_IMPLEMENT_INTERFACE (BAMF_DBUS_ITEM_TYPE_APPLICATION,
-                                                bamf_application_dbus_application_iface_init));
 
 struct _BamfApplicationPrivate
 {
@@ -48,6 +42,11 @@
   gboolean show_stubs;
 };
 
+G_DEFINE_TYPE_WITH_CODE (BamfApplication, bamf_application, BAMF_TYPE_VIEW,
+                         G_ADD_PRIVATE(BamfApplication)
+                         G_IMPLEMENT_INTERFACE (BAMF_DBUS_ITEM_TYPE_APPLICATION,
+                                                bamf_application_dbus_application_iface_init));
+
 enum
 {
   SUPPORTED_MIMES_CHANGED,
@@ -1377,7 +1376,7 @@
 bamf_application_init (BamfApplication * self)
 {
   BamfApplicationPrivate *priv;
-  priv = self->priv = BAMF_APPLICATION_GET_PRIVATE (self);
+  priv = self->priv = bamf_application_get_instance_private (self);
 
   priv->app_type = BAMF_APPLICATION_SYSTEM;
   priv->show_stubs = TRUE;
@@ -1447,8 +1446,6 @@
   klass->get_close_when_empty = bamf_application_default_get_close_when_empty;
   klass->supported_mimes_changed = bamf_application_supported_mime_types_changed;
 
-  g_type_class_add_private (klass, sizeof (BamfApplicationPrivate));
-
   application_signals[SUPPORTED_MIMES_CHANGED] =
     g_signal_new ("supported-mimes-changed",
                   G_OBJECT_CLASS_TYPE (klass),
diff -dNur a/src/bamf-control.c b/src/bamf-control.c
--- a/src/bamf-control.c	2018-11-07 23:39:11.375316341 +0100
+++ b/src/bamf-control.c	2020-05-01 14:46:45.750228789 +0200
@@ -26,10 +26,6 @@
 #include "bamf-daemon.h"
 #include "bamf-matcher.h"
 
-G_DEFINE_TYPE (BamfControl, bamf_control, BAMF_DBUS_TYPE_CONTROL_SKELETON);
-#define BAMF_CONTROL_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE(obj, \
-BAMF_TYPE_CONTROL, BamfControlPrivate))
-
 struct _BamfControlPrivate
 {
   GDBusConnection *connection;
@@ -37,6 +33,8 @@
   GList *sources;
 };
 
+G_DEFINE_TYPE_WITH_PRIVATE (BamfControl, bamf_control, BAMF_DBUS_TYPE_CONTROL_SKELETON);
+
 static void
 bamf_control_on_launched_callback (GDBusConnection *connection,
                                    const gchar *sender_name,
@@ -147,7 +145,7 @@
 static void
 bamf_control_init (BamfControl * self)
 {
-  self->priv = BAMF_CONTROL_GET_PRIVATE (self);
+  self->priv = bamf_control_get_instance_private (self);
   self->priv->sources = NULL;
 
   /* Registering signal callbacks to reply to dbus method calls */
@@ -193,8 +191,6 @@
 
   obj_class->constructed = bamf_control_constructed;
   obj_class->finalize = bamf_control_finalize;
-
-  g_type_class_add_private (klass, sizeof (BamfControlPrivate));
 }
 
 void
diff -dNur a/src/bamf-daemon.c b/src/bamf-daemon.c
--- a/src/bamf-daemon.c	2018-11-07 23:39:11.379316473 +0100
+++ b/src/bamf-daemon.c	2020-05-01 14:46:45.750228789 +0200
@@ -21,10 +21,6 @@
 #include "bamf-matcher.h"
 #include "bamf-control.h"
 
-G_DEFINE_TYPE (BamfDaemon, bamf_daemon, G_TYPE_OBJECT);
-#define BAMF_DAEMON_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE(obj, \
-                                      BAMF_TYPE_DAEMON, BamfDaemonPrivate))
-
 static BamfDaemon *instance = NULL;
 
 struct _BamfDaemonPrivate
@@ -34,6 +30,8 @@
   GMainLoop *loop;
 };
 
+G_DEFINE_TYPE_WITH_PRIVATE (BamfDaemon, bamf_daemon, G_TYPE_OBJECT);
+
 gboolean
 bamf_daemon_is_running (BamfDaemon *self)
 {
@@ -165,7 +163,7 @@
 bamf_daemon_init (BamfDaemon *self)
 {
   BamfDaemonPrivate *priv;
-  priv = self->priv = BAMF_DAEMON_GET_PRIVATE (self);
+  priv = self->priv = bamf_daemon_get_instance_private (self);
 
   priv->loop = g_main_loop_new (NULL, FALSE);
 }
@@ -177,8 +175,6 @@
 
   object_class->dispose  = bamf_daemon_dispose;
   object_class->finalize = bamf_daemon_finalize;
-
-  g_type_class_add_private (klass, sizeof (BamfDaemonPrivate));
 }
 
 BamfDaemon *
diff -dNur a/src/bamf-legacy-screen.c b/src/bamf-legacy-screen.c
--- a/src/bamf-legacy-screen.c	2018-11-07 23:39:11.383316606 +0100
+++ b/src/bamf-legacy-screen.c	2020-05-01 14:46:45.750228789 +0200
@@ -26,10 +26,6 @@
 #include <libsn/sn.h>
 #undef SN_API_NOT_YET_FROZEN
 
-G_DEFINE_TYPE (BamfLegacyScreen, bamf_legacy_screen, G_TYPE_OBJECT);
-#define BAMF_LEGACY_SCREEN_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE(obj, \
-BAMF_TYPE_LEGACY_SCREEN, BamfLegacyScreenPrivate))
-
 static BamfLegacyScreen *static_screen = NULL;
 
 enum
@@ -61,6 +57,8 @@
   GDataInputStream *stream;
 };
 
+G_DEFINE_TYPE_WITH_PRIVATE (BamfLegacyScreen, bamf_legacy_screen, G_TYPE_OBJECT);
+
 static void
 handle_window_closed (BamfLegacyWindow *window, BamfLegacyScreen *self)
 {
@@ -459,7 +457,7 @@
 static void
 bamf_legacy_screen_init (BamfLegacyScreen * self)
 {
-  self->priv = BAMF_LEGACY_SCREEN_GET_PRIVATE (self);
+  self->priv = bamf_legacy_screen_get_instance_private (self);
 }
 
 static void
@@ -469,8 +467,6 @@
 
   object_class->finalize = bamf_legacy_screen_finalize;
 
-  g_type_class_add_private (klass, sizeof (BamfLegacyScreenPrivate));
-
   legacy_screen_signals [WINDOW_OPENING] =
     g_signal_new (BAMF_LEGACY_SCREEN_SIGNAL_WINDOW_OPENING,
                   G_OBJECT_CLASS_TYPE (klass),
diff -dNur a/src/bamf-legacy-window.c b/src/bamf-legacy-window.c
--- a/src/bamf-legacy-window.c	2018-11-07 23:39:11.387316739 +0100
+++ b/src/bamf-legacy-window.c	2020-05-01 14:46:45.750228789 +0200
@@ -29,10 +29,6 @@
 #include <glibtop/procuid.h>
 #include <stdio.h>
 
-G_DEFINE_TYPE (BamfLegacyWindow, bamf_legacy_window, G_TYPE_OBJECT);
-#define BAMF_LEGACY_WINDOW_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE(obj, \
-BAMF_TYPE_LEGACY_WINDOW, BamfLegacyWindowPrivate))
-
 #define WNCK_WINDOW_BAMF_DATA "bamf-legacy-window"
 
 enum
@@ -59,6 +55,8 @@
   gboolean     is_closed;
 };
 
+G_DEFINE_TYPE_WITH_PRIVATE (BamfLegacyWindow, bamf_legacy_window, G_TYPE_OBJECT);
+
 gboolean
 bamf_legacy_window_is_active (BamfLegacyWindow *self)
 {
@@ -704,7 +702,7 @@
 static void
 bamf_legacy_window_init (BamfLegacyWindow * self)
 {
-  self->priv = BAMF_LEGACY_WINDOW_GET_PRIVATE (self);
+  self->priv = bamf_legacy_window_get_instance_private (self);
 
   g_signal_connect (wnck_screen_get_default (), "window-closed",
                     (GCallback) handle_window_closed, self);
@@ -717,8 +715,6 @@
 
   object_class->dispose = bamf_legacy_window_dispose;
 
-  g_type_class_add_private (klass, sizeof (BamfLegacyWindowPrivate));
-
   legacy_window_signals [NAME_CHANGED] =
     g_signal_new (BAMF_LEGACY_WINDOW_SIGNAL_NAME_CHANGED,
                   G_OBJECT_CLASS_TYPE (klass),
diff -dNur a/src/bamf-matcher.c b/src/bamf-matcher.c
--- a/src/bamf-matcher.c	2018-11-07 23:39:11.387316739 +0100
+++ b/src/bamf-matcher.c	2020-05-01 14:46:45.750228789 +0200
@@ -33,9 +33,7 @@
 #define EXEC_DESKTOP_FILE_OVERRIDE "--desktop_file_hint"
 #define ENV_DESKTOP_FILE_OVERRIDE "BAMF_DESKTOP_FILE_HINT"
 
-G_DEFINE_TYPE (BamfMatcher, bamf_matcher, BAMF_DBUS_TYPE_MATCHER_SKELETON);
-#define BAMF_MATCHER_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE(obj, \
-                                       BAMF_TYPE_MATCHER, BamfMatcherPrivate))
+G_DEFINE_TYPE_WITH_PRIVATE (BamfMatcher, bamf_matcher, BAMF_DBUS_TYPE_MATCHER_SKELETON);
 
 enum
 {
@@ -3111,7 +3109,7 @@
   BamfLegacyScreen *screen;
   int i;
 
-  priv = self->priv = BAMF_MATCHER_GET_PRIVATE (self);
+  priv = self->priv = bamf_matcher_get_instance_private (self);
 
   priv->bad_prefixes = g_array_sized_new (FALSE, TRUE, sizeof (GRegex *),
                                           G_N_ELEMENTS (EXEC_BAD_PREFIXES));
@@ -3274,7 +3272,6 @@
 {
   GObjectClass *object_class = G_OBJECT_CLASS (klass);
 
-  g_type_class_add_private (klass, sizeof (BamfMatcherPrivate));
   object_class->dispose = bamf_matcher_dispose;
   object_class->finalize = bamf_matcher_finalize;
 
diff -dNur a/src/bamf-tab.c b/src/bamf-tab.c
--- a/src/bamf-tab.c	2018-11-07 23:39:11.387316739 +0100
+++ b/src/bamf-tab.c	2020-05-01 14:46:45.750228789 +0200
@@ -26,13 +26,7 @@
 
 #include "bamf-tab.h"
 
-#define BAMF_TAB_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE(obj, \
-BAMF_TYPE_TAB, BamfTabPrivate))
-
 static void bamf_tab_dbus_iface_init (BamfDBusItemTabIface *iface);
-G_DEFINE_ABSTRACT_TYPE_WITH_CODE (BamfTab, bamf_tab, BAMF_TYPE_VIEW,
-                                  G_IMPLEMENT_INTERFACE (BAMF_DBUS_ITEM_TYPE_TAB,
-                                                         bamf_tab_dbus_iface_init));
 
 enum
 {
@@ -48,6 +42,11 @@
   BamfDBusItemTab *dbus_iface;
 };
 
+G_DEFINE_ABSTRACT_TYPE_WITH_CODE (BamfTab, bamf_tab, BAMF_TYPE_VIEW,
+                                  G_ADD_PRIVATE(BamfTab)
+                                  G_IMPLEMENT_INTERFACE (BAMF_DBUS_ITEM_TYPE_TAB,
+                                                         bamf_tab_dbus_iface_init));
+
 static const gchar *
 bamf_tab_get_view_type (BamfView *view)
 {
@@ -170,7 +169,7 @@
 static void
 bamf_tab_init (BamfTab *self)
 {
-  self->priv = BAMF_TAB_GET_PRIVATE (self);
+  self->priv = bamf_tab_get_instance_private (self);
 
   self->priv->dbus_iface = _bamf_dbus_item_tab_skeleton_new ();
 
@@ -207,8 +206,6 @@
   g_object_class_override_property (object_class, PROP_DESKTOP_ID, "desktop-id");
   g_object_class_override_property (object_class, PROP_XID, "xid");
   g_object_class_override_property (object_class, PROP_IS_FOREGROUND_TAB, "is-foreground-tab");
-
-  g_type_class_add_private (klass, sizeof (BamfTabPrivate));
 }
 
 
diff -dNur a/src/bamf-view.c b/src/bamf-view.c
--- a/src/bamf-view.c	2018-11-07 23:39:11.391316872 +0100
+++ b/src/bamf-view.c	2020-05-01 14:46:45.750228789 +0200
@@ -20,14 +20,7 @@
 
 #include "bamf-view.h"
 
-#define BAMF_VIEW_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE(obj, \
-                                    BAMF_TYPE_VIEW, BamfViewPrivate))
-
 static void bamf_view_dbus_view_iface_init (BamfDBusItemViewIface *iface);
-G_DEFINE_TYPE_WITH_CODE (BamfView, bamf_view, BAMF_DBUS_ITEM_TYPE_OBJECT_SKELETON,
-                         G_IMPLEMENT_INTERFACE (BAMF_DBUS_ITEM_TYPE_VIEW,
-                                                bamf_view_dbus_view_iface_init));
-
 #define STARTING_MAX_WAIT 15
 
 enum
@@ -84,6 +77,11 @@
   guint active_changed_idle;
 };
 
+G_DEFINE_TYPE_WITH_CODE (BamfView, bamf_view, BAMF_DBUS_ITEM_TYPE_OBJECT_SKELETON,
+                         G_ADD_PRIVATE(BamfView)
+                         G_IMPLEMENT_INTERFACE (BAMF_DBUS_ITEM_TYPE_VIEW,
+                                                bamf_view_dbus_view_iface_init));
+
 static gboolean
 on_active_changed_idle (gpointer data)
 {
@@ -964,7 +962,7 @@
 static void
 bamf_view_init (BamfView * self)
 {
-  self->priv = BAMF_VIEW_GET_PRIVATE (self);
+  self->priv = bamf_view_get_instance_private (self);
 
   /* Initializing the dbus interface */
   self->priv->dbus_iface = _bamf_dbus_item_view_skeleton_new ();
@@ -1031,8 +1029,6 @@
   object_class->get_property = bamf_view_get_property;
   object_class->set_property = bamf_view_set_property;
 
-  g_type_class_add_private (klass, sizeof (BamfViewPrivate));
-
   /* Overriding the properties defined in the interface, this is needed
    * but we actually don't use these properties, as we act like a proxy       */
   g_object_class_override_property (object_class, PROP_NAME, "name");
diff -dNur a/src/bamf-window.c b/src/bamf-window.c
--- a/src/bamf-window.c	2018-11-07 23:39:11.395317004 +0100
+++ b/src/bamf-window.c	2020-05-01 14:46:45.750228789 +0200
@@ -33,14 +33,7 @@
 #define _GTK_APPLICATION_ID "_GTK_APPLICATION_ID"
 #define SNAP_SECURITY_LABEL_PREFIX "snap."
 
-#define BAMF_WINDOW_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE(obj, \
-BAMF_TYPE_WINDOW, BamfWindowPrivate))
-
 static void bamf_window_dbus_iface_init (BamfDBusItemWindowIface *iface);
-G_DEFINE_TYPE_WITH_CODE (BamfWindow, bamf_window, BAMF_TYPE_VIEW,
-                         G_IMPLEMENT_INTERFACE (BAMF_DBUS_ITEM_TYPE_WINDOW,
-                                                bamf_window_dbus_iface_init));
-
 static GList *bamf_windows = NULL;
 
 enum
@@ -64,6 +57,11 @@
 #endif
 };
 
+G_DEFINE_TYPE_WITH_CODE (BamfWindow, bamf_window, BAMF_TYPE_VIEW,
+                         G_ADD_PRIVATE(BamfWindow)
+                         G_IMPLEMENT_INTERFACE (BAMF_DBUS_ITEM_TYPE_WINDOW,
+                                                bamf_window_dbus_iface_init));
+
 BamfLegacyWindow *
 bamf_window_get_window (BamfWindow *self)
 {
@@ -658,7 +656,7 @@
 static void
 bamf_window_init (BamfWindow * self)
 {
-  self->priv = BAMF_WINDOW_GET_PRIVATE (self);
+  self->priv = bamf_window_get_instance_private (self);
 
   /* Initializing the dbus interface */
   self->priv->dbus_iface = _bamf_dbus_item_window_skeleton_new ();
@@ -725,8 +723,6 @@
                                BAMF_TYPE_LEGACY_WINDOW,
                                G_PARAM_READWRITE | G_PARAM_CONSTRUCT);
   g_object_class_install_property (object_class, PROP_WINDOW, pspec);
-
-  g_type_class_add_private (klass, sizeof (BamfWindowPrivate));
 }
 
 BamfWindow *
